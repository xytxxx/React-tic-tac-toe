{"version":3,"sources":["gameLogic.js","cinnamon_sticks.svg","donut.svg","white.svg","index.jsx"],"names":["_","require","isWin","board","sum0","sum1","draw","c","r","sum","d","copyBoard","map","row","slice","findEmptyCells","emptyCells","push","pairToLiteral","pair","toString","updarteBestMove","m","bestMove","console","log","findMoveMinMax","curBoard","mySide","myTurn","depth","curSide","win","critical","ret","1","-1","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_loop","value","sumR","sumC","_iterator2","Symbol","iterator","next","done","err","return","uniqBy","findCriticalSpots","curSideStr","otherSideStr","length","neighbours","currentSide","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","neighbour","move","findNeighbours","score","sort","a","b","module","exports","aiPlace","playerSide","__webpack_require__","p","noPadding","padding","margin","id","getId","NavBar","this","props","data","currentTurn","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","getMessage","onClick","reset","Component","Game","cells","renderCell","key","_this","imgSrc","pic1","pic_1","pic0","style","tryPlace","src","alt","placePiece","renderRow","ChooseSide","_this2","Object","_mnt_c_Users_dogfc_Desktop_react_tic_tac_toe_Yitong_Xiao_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_mnt_c_Users_dogfc_Desktop_react_tic_tac_toe_Yitong_Xiao_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_mnt_c_Users_dogfc_Desktop_react_tic_tac_toe_Yitong_Xiao_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","chooseNegOne","bind","_mnt_c_Users_dogfc_Desktop_react_tic_tac_toe_Yitong_Xiao_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__","chooseOne","choose","newGame","App","_this3","state","resetGame","playerChoose","aiTurn","setState","i","_this4","gameStart","cloneDeep","prev","_this5","newTurn","newBoard","w","prevState","_mnt_c_Users_dogfc_Desktop_react_tic_tac_toe_Yitong_Xiao_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","renderMain","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7c2ed64.chunk.js","sourcesContent":["var _ = require('lodash')\n\n/**\n * returns 1 if 1 win, -1 if -1 win, 0 if draw, 2 if not finished\n * @param {*} board \n */\nfunction isWin (board) {\n    var sum0 = 0;\n    var sum1 = 0;\n    var draw = true;\n    //check columns first\n    for (let c = 0; c < 3; c++) {\n        sum0 = 0;\n        for (let r = 0; r < 3; r++) {\n            sum0 += board[r][c];\n            // if found 0, not draw\n            if (draw && board[r][c] === 0 ) {\n                draw = false;\n            }\n        }\n        if (sum0 === 3) return 1;\n        if (sum0 === -3) return -1;\n    }\n    //then rows\n    for (let r = 0; r < 3; r++) {\n        sum0 = _.sum(board[r]);\n        if (sum0 === 3) return 1;\n        if (sum0 === -3) return -1;\n    }\n    //then diagonal\n    sum0 = 0;\n    for (let d = 0; d < 3; d++) {\n        sum0 += board[d][d];\n        sum1 += board[2-d][d]\n    }\n    if (sum0 === 3) return 1;\n    if (sum0 === -3) return -1;\n    if (sum1 === 3) return 1;\n    if (sum1 === -3) return -1;\n\n    if (draw) return 0;\n\n    return 2; //not down\n}\n\n\nfunction copyBoard(board){\n    return board.map(function(row) {\n        return row.slice();\n    });\n}\n\nfunction findEmptyCells(board) {\n    let emptyCells = [];\n    for(let r = 0; r < 3; r++) {\n        for (let c = 0; c < 3; c++) {\n            if (board[r][c] === 0) emptyCells.push([r,c]);\n        }\n    }\n    return emptyCells;\n}\n\nlet pairToLiteral = (pair) => {return pair[0].toString()+pair[1].toString()}\n/**\n * returns all possible boards from one piece form current board\n * @param {*} board \n * @param {*} currentSide \n */\nfunction findNeighbours(board, currentSide) {\n    let emptyCells = findEmptyCells(board);\n    let ret = [];\n    for (let pair of emptyCells) {\n        let neighbour = copyBoard(board);\n        neighbour[pair[0]][pair[1]] =currentSide;\n        ret.push({move: pair, board: neighbour})\n    }\n    return ret;\n}\n\n//returns critical spots(2 missing 1)\nfunction findCriticalSpots(board) {\n    let ret =  {\n        \"1\": [],\n        \"-1\": []\n    }\n    let emptyCells = findEmptyCells(board);\n    for (let pair of emptyCells) {\n        let sumR = _.sum(board[pair[0]]);\n        let sumC = _.sum(board.map(row=>row[pair[1]]));\n        if (sumR === 2) ret[\"1\"].push(pair);\n        if (sumR === -2) ret[\"-1\"].push(pair);\n        if (sumC === 2) ret[\"1\"].push(pair);\n        if (sumC === -2) ret[\"-1\"].push(pair);\n        //check diagonal\n        if (pair[0]===pair[1]){\n            let sum = 0;\n            for (let d = 0; d < 3; d++) {\n                sum+=board[d][d]; \n            }\n            if (sum === 2) ret[\"1\"].push(pair);\n            if (sum === -2) ret[\"-1\"].push(pair);\n        } else if ( (pair[0]===0 && pair[1]===2) || (pair[0]===2 && pair[1]===0)) {\n            let sum = 0;\n            for (let d = 0; d < 3; d++) {\n                sum+=board[2-d][d]; \n            }\n            if (sum === 2) ret[\"1\"].push(pair);\n            if (sum === -2) ret[\"-1\"].push(pair);\n        }\n    }\n    \n    ret[\"1\"] = _.uniqBy(ret[\"1\"], pairToLiteral);\n    ret[\"-1\"] = _.uniqBy(ret[\"-1\"], pairToLiteral);\n    return ret;\n}\n\n\nfunction updarteBestMove(m) {\n    if (!m) {\n        console.log('wrong')\n    } else {\n        bestMove = m;\n    }\n}\n// for each board on my turn, these are possible situations:\n// I already win/lose\n// I can certainly win\n// I must block enemy\n// I certainly lose\n// there is one place that ensures at least a draw\n// returns {the best 'worst outcome', [r, c]}\nvar bestMove = []\nfunction findMoveMinMax(curBoard, mySide, myTurn, depth){\n    var board = copyBoard(curBoard)\n    let curSide = mySide * (myTurn? 1 : -1);\n    let win = isWin(board);\n\n    if (win === mySide) {\n        updarteBestMove([]);\n        return 10 - depth;\n    }\n    if (win === -1*mySide) {\n        updarteBestMove([]);\n        return -10 + depth;\n    }\n    if (win === 0) {\n        updarteBestMove([]);\n        return 0;\n    }\n    \n    \n    let critical = findCriticalSpots(board);\n    let curSideStr = curSide.toString();\n    let otherSideStr = (-1 * curSide).toString()\n    // shortcuts  -- do not make stupid move if there are 2 in a row\n    if (critical[curSideStr].length > 0){\n        updarteBestMove(critical[curSideStr][0]);\n        return (10 - depth) * (myTurn? 1 : -1);\n    } else if (critical[otherSideStr].length > 1) {\n        updarteBestMove(critical[otherSideStr][0]);\n        return (10 - depth) * (myTurn? -1 : 1);\n    } else if (critical[otherSideStr].length > 0) { \n        // we have to block enemy. does not know what's next\n        // updarteBestMove( critical[otherSideStr][0]);\n        // board[bestMove[0]][bestMove[1]] = curSide;\n        // return findMoveMinMax(board, mySide, !myTurn, depth+1);\n    }\n\n    //not short cuts, analysis all moves\n    let neighbours = findNeighbours(board, curSide);\n    neighbours.map((next)=>{ \n        next.score = findMoveMinMax(next.board, mySide, !myTurn, depth+1) \n        return next;\n    })\n    neighbours.sort((a, b)=>{\n        if (a.score === b.score) {\n            return 0;\n        } else if (a.score > b.score) {\n            return 1;\n        } else {\n            return -1;\n        }\n    })\n \n    if (myTurn) {\n        updarteBestMove(neighbours[neighbours.length - 1].move);\n        return neighbours[neighbours.length - 1].score;\n    } else {\n        updarteBestMove( neighbours[0].move);\n        return neighbours[0].score;\n    }\n\n}   \n\n/**\n * @param {*} board \n * @param {*} playerSide \n * @returns {(r, c)} \n */\nfunction aiPlace (board, playerSide){\n    findMoveMinMax(board, -playerSide, true, 0);\n    return bestMove;\n}\n\n// console.log(aiPlace([[1,1,0],\n//                      [-1,-1,0],\n//                      [1,-1,0]], -1));\n                     \n// console.log(aiPlace([[0,0,0],\n//                     [0,0,0],\n//                     [0,0,0]], 1));\n\n\nmodule.exports={\n    aiPlace: aiPlace,\n    isWin: isWin,\n    copyBoard: copyBoard\n}","module.exports = __webpack_public_path__ + \"static/media/cinnamon_sticks.5d0cba1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/donut.8cb29d5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/white.35c12016.svg\";","import React, { Component } from \"react\";\nimport ReactDom from 'react-dom';\nimport pic1 from './cinnamon_sticks.svg';\nimport pic_1 from './donut.svg';\nimport pic0 from './white.svg';\nimport _ from 'lodash'\nimport { isWin, aiPlace, copyBoard} from \"./gameLogic\";\n\n\n// Thank you for the interview invitaion!\n// this is my first React project so please don't mind there are some design flaws\n\n// Thank you!\n// Yitong Xiao\n\n//======================================================\n\n\n\nconst noPadding = {\n    padding: 0,\n    margin: \"auto\",\n};\n\nvar id = 0;\n//returns a unique id\nfunction getId() {\n    id++;\n    return id;\n}\n\nclass NavBar extends Component {\n    getMessage() {\n        \n        if (this.props.data.playerSide === 0) {\n            return \"Choose your side!\"\n        } else if (this.props.data.isWin === this.props.data.playerSide) {\n            return \"You Win!!\"\n        } else if (this.props.data.isWin === -1 * this.props.data.playerSide) {\n            return \"AI Win!!\"\n        } else if (this.props.data.isWin === 0) {\n            return \"Draw!!\"\n        } else if (this.props.data.currentTurn !== this.props.data.playerSide) {\n            return \"AI's turn.\";\n        } else {\n            return \"Your turn.\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"row top-bar\" id=\"topBar\" >\n                <div className=\"col-6\">\n                    <span> { this.getMessage() }</span>\n                </div>\n                <div className=\"col-6\">\n                    <button className=\"btn btn-primary\" onClick={this.props.reset}> Reset </button>\n                </div>\n            </div>\n        );\n    }\n}   \n\nclass Game extends Component {\n    renderRow(r){\n        var cells = [];\n        for (var c = 0; c < 3; c++) {\n            cells.push(this.renderCell(r, c));\n        }\n        return (<div className=\"row\" key={getId()}> {cells} </div>)\n    }\n    renderCell(r, c) {\n        var imgSrc = ''\n        if (this.props.data.board[r][c] === 1) {\n            imgSrc= pic1;\n        } else if (this.props.data.board[r][c] === -1) {\n            imgSrc= pic_1;\n        } else {\n            imgSrc= pic0;\n        }\n        return (\n            <div className = 'col-4 border' style={noPadding} key={getId()} onClick={()=>{this.tryPlace(r, c)}}>\n                {imgSrc !== '' && <img className=\"image-fluid\" src={imgSrc} alt=\"food\"></img>}\n            </div>\n        )\n    }\n    // try to place a piece\n    tryPlace(r, c){\n        \n        if (this.props.data.isWin !== 2 || this.props.data.board[r][c] !== 0) {\n            console.log('invalid click')\n            return;  \n        } else {\n            this.props.placePiece(r, c);\n        }\n    }\n\n    render() {\n        var board = [];\n        for (var r = 0; r < 3; r++) {\n            board.push (this.renderRow(r));\n        }\n        return (<div className=\"col-12 col-lg-6 col-md-8 col-sm-10\" style={noPadding}> {board}</div>)\n    }\n}\nclass ChooseSide extends Component {\n    constructor(props) {\n        super(props);\n        this.chooseNegOne= this.chooseNegOne.bind(this) \n        this.chooseOne= this.chooseOne.bind(this) \n    }\n\n    chooseOne(){\n        this.props.choose(1) \n    }\n    chooseNegOne(){\n        this.props.choose(-1)\n    }\n\n    render() {\n        return (\n            <div className=\"col-12 col-lg-6 col-md-8 col-sm-10 row\" style={noPadding}>\n                <div className=\"col-6\" onClick={this.chooseOne}>\n                    <img className=\"image-fluid\" src={pic1} alt=\"food1\"></img>\n                </div>\n                <div className=\"col-6\" onClick={this.chooseNegOne}>\n                    <img className=\"image-fluid\" src={pic_1} alt=\"food-1\"></img>\n                </div>\n            </div>\n        )\n    }\n}\n\n//template for updating state\nvar newGame = {\n    board: [[0,0,0],[0,0,0],[0,0,0]],  //1 = cinnamon sticks, -1 = donut\n    currentTurn: 1,\n    playerSide: 0,\n    isWin: 2\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [[0,0,0],[0,0,0],[0,0,0]],  //1 = cinnamon sticks, -1 = donut\n            currentTurn: 1,\n            playerSide: 0,\n            isWin: 2\n        };\n        this.resetGame = this.resetGame.bind(this);\n        this.playerChoose = this.playerChoose.bind(this);\n        this.placePiece = this.placePiece.bind(this);\n        this.aiTurn = this.aiTurn.bind(this)\n    }\n\n    resetGame() {\n        this.setState(newGame)\n    }\n    playerChoose(i) {\n        let gameStart = _.cloneDeep(newGame);\n        gameStart.playerSide = i;\n        this.setState(prev=>(gameStart),\n        ()=>{\n            if (this.state.currentTurn !== this.state.playerSide) {\n                this.aiTurn();\n            }\n        }\n        );\n        \n    }\n    aiTurn() {\n        console.log ('ai moving')\n        for (let r of this.state.board) {\n            console.log(r);\n        }\n        let move = aiPlace(copyBoard(this.state.board), this.state.playerSide);\n        this.placePiece(move[0],move[1]);\n    }\n    // aiTurn() {\n    //     console.log(\"this turn is \"+this.state.currentTurn)\n    //     let e = findEmptyCells(this.state.board);\n    //     this.placePiece(e[0][0], e[0][1])\n    // }\n\n    placePiece(r,c){\n        \n        let newTurn = -this.state.currentTurn;\n        console.log('placing at' + r.toString() + ' and ' + c +', newTurn ' + newTurn)\n        let newBoard = copyBoard(this.state.board);\n        newBoard[r][c] = -newTurn;\n        let w = isWin(newBoard);\n        this.setState(prevState=>({\n            ...prevState,\n            currentTurn: newTurn,\n            board: newBoard,\n            isWin: w\n        }), ()=>{\n            if (this.state.isWin === 2 && (this.state.currentTurn !== this.state.playerSide)) {\n                this.aiTurn();\n            }\n        });\n    }\n\n    renderMain(){\n        if (this.state.playerSide===0) {\n            return (<ChooseSide choose={this.playerChoose}></ChooseSide>)\n        } else {\n            return (<Game data={this.state} placePiece={this.placePiece}></Game>)\n        }\n    }\n    render () {\n        return (\n            <div className=\"container\">\n                <NavBar data={this.state} reset={this.resetGame}></NavBar>\n                {this.renderMain()}\n            </div>\n        )\n    }\n}\n\nReactDom.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}